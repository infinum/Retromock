import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java'
    id 'java-library'
    id 'jacoco'
    alias(libs.plugins.dokka.plugin)
    alias(libs.plugins.kotlin)
    alias(libs.plugins.spotbugs)
    alias(libs.plugins.gradle.maven.publish)
}

apply from: "$rootDir/config/quality.gradle"
apply from: "$rootDir/dokka.gradle"
apply from: "$rootDir/config.gradle"

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

sourceSets {
    test.java.srcDirs += 'src/test/kotlin'
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.11"
}

dependencies {
    compileOnly(libs.kotlin.stdlib)
    compileOnly(libs.kotlin.coroutines)

    compileOnly(libs.google.annotations)

    implementation(libs.retrofit)

    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)
    testImplementation(libs.assertj.core)
    testImplementation(libs.mockito.core)
    testImplementation(libs.mockito.junit)
    testCompileOnly(libs.google.annotations)
    testImplementation(libs.kotlin.coroutines)
    testImplementation(libs.kotlin.stdlib)
    testImplementation(libs.kotlin.test)
    testImplementation(libs.google.guava)
}


clean {
    delete 'out'
}

apply from: "$rootDir/tasks.gradle"

assemble.dependsOn 'generateReadme'

afterEvaluate {
    def properties = project.ext.mavenPublishProperties

    mavenPublishing {
        publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
        signAllPublications()
        coordinates(properties.group, properties.artifactId, properties.version)

        pom {
            name = properties.name
            description = properties.description
            url = properties.url

            licenses {
                license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                }
            }

            organization {
                name = 'Infinum Inc.'
                url = 'https://infinum.com'
            }

            developers {
                developer {
                    id = 'Infinum'
                    name = 'Infinum Inc.'
                    url = 'https://infinum.com'
                }
            }

            scm {
                url = properties.scm.url
                connection = properties.scm.connection
                developerConnection = properties.scm.connection
            }
        }
    }
}
