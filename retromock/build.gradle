group = 'co.infinum'
version = '0.0.1'

buildscript {
    repositories {
        google()
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" } // needed for gradle-errorprone-plugin
    }

    dependencies {
        classpath 'net.ltgt.gradle:gradle-errorprone-plugin:0.0.10'
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.0'
    }
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'kotlin'

apply from: 'config/quality.gradle'
apply plugin: 'net.ltgt.errorprone'
apply plugin: 'jacoco'

sourceCompatibility = 1.8

sourceSets {
    test.java.srcDirs += 'src/test/kotlin'
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }

}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {

    compileOnly 'com.google.code.findbugs:annotations:3.0.1'

    implementation "com.squareup.retrofit2:retrofit:2.4.0"

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.1.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.1.1'
    testCompile 'org.assertj:assertj-core:3.8.0'
    testCompile 'org.mockito:mockito-core:2.23.0'
    testCompile 'org.mockito:mockito-junit-jupiter:2.23.0'
    testCompile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    testCompileOnly 'com.google.code.findbugs:annotations:3.0.1'

    testCompile "org.jetbrains.kotlin:kotlin-stdlib:1.2.0"
    testCompile "org.jetbrains.kotlin:kotlin-test:1.2.0"
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}