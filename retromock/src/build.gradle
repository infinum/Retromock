apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'kotlin'

apply from: 'config/quality.gradle'
apply plugin: 'jacoco'

apply from: "maven.gradle"
apply from: "config.gradle"
apply from: "dokka.gradle"
apply from: "maven-publish.gradle"

sourceCompatibility = JavaVersion.VERSION_17

sourceSets {
    test.java.srcDirs += 'src/test/kotlin'
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    compileOnly deps.kotlin.stdlib
    compileOnly deps.kotlin.coroutines

    compileOnly deps.google.annotations

    implementation deps.retrofit

    testImplementation deps.junit.api
    testRuntimeOnly deps.junit.engine
    testCompile deps.assertj
    testCompile deps.mockito.core
    testCompile deps.mockito.junit
    testCompile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
    testCompileOnly deps.google.annotations
    testImplementation deps.kotlin.coroutines

    testCompile deps.kotlin.stdlib
    testCompile deps.kotlin.test
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

clean {
    delete 'out'
}

apply from: 'tasks.gradle'

assemble.dependsOn 'generateReadme'
